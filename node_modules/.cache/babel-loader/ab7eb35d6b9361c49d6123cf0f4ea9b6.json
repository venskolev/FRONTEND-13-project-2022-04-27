{"ast":null,"code":"const popAlert = alert => {\n  return {\n    type: 'POP_ALERT',\n    payload: {\n      alertContent: alert\n    }\n  };\n};\n\nconst clearAlert = () => {\n  return {\n    type: 'CLEAR_ALERT',\n    payload: {\n      alertContent: null\n    }\n  };\n};\n\nexport const setAlert = alert => dispatch => {\n  dispatch(popAlert(alert));\n  setTimeout(() => dispatch(clearAlert()), 2000);\n}; // export const setAlertByWarning = (warning, item) => dispatch => {\n//   let alert = '';\n//   switch (warning) {\n//     case 'empty':\n//       alert = item + ' cannot be empty!';\n//       dispatch(popAlert(alert));\n//       break;\n//     case 'match':\n//       alert = item + ' does not match!';\n//       dispatch(popAlert(alert));\n//       break;\n//     default:\n//       break;\n//   }\n// };","map":{"version":3,"sources":["/home/user/Documents/DCI/backand/BACKEND-13-project-2022-04-27/client/src/redux/action-creators/alert.js"],"names":["popAlert","alert","type","payload","alertContent","clearAlert","setAlert","dispatch","setTimeout"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,KAAK,IAAI;AACxB,SAAO;AACLC,IAAAA,IAAI,EAAE,WADD;AAELC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,YAAY,EAAEH;AAAhB;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMI,UAAU,GAAG,MAAM;AACvB,SAAO;AACLH,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,QAAQ,GAAGL,KAAK,IAAIM,QAAQ,IAAI;AAC3CA,EAAAA,QAAQ,CAACP,QAAQ,CAACC,KAAD,CAAT,CAAR;AACAO,EAAAA,UAAU,CAAC,MAAMD,QAAQ,CAACF,UAAU,EAAX,CAAf,EAA+B,IAA/B,CAAV;AACD,CAHM,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const popAlert = alert => {\n  return {\n    type: 'POP_ALERT',\n    payload: { alertContent: alert }\n  };\n};\n\nconst clearAlert = () => {\n  return {\n    type: 'CLEAR_ALERT',\n    payload: { alertContent: null }\n  };\n};\n\nexport const setAlert = alert => dispatch => {\n  dispatch(popAlert(alert));\n  setTimeout(() => dispatch(clearAlert()), 2000);\n};\n\n// export const setAlertByWarning = (warning, item) => dispatch => {\n//   let alert = '';\n//   switch (warning) {\n//     case 'empty':\n//       alert = item + ' cannot be empty!';\n//       dispatch(popAlert(alert));\n//       break;\n//     case 'match':\n//       alert = item + ' does not match!';\n//       dispatch(popAlert(alert));\n//       break;\n//     default:\n//       break;\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}