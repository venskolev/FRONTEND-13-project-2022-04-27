{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/DCI/backand/BACKEND-13-project-2022-04-27/client/src/components/pagination.js\";\nimport React from 'react';\n\nconst Pagination = _ref => {\n  let {\n    queryCur,\n    sortType,\n    users,\n    actAttr,\n    activePage,\n    maxRowsPerPage,\n    activeUser,\n    setActivePage\n  } = _ref;\n\n  const handlePrevPage = e => {\n    setActivePage(activePage - 1);\n  };\n\n  const handleNextPage = e => {\n    setActivePage(activePage * 1 + 1); // sometimes 1+1 = 11\n  };\n\n  const handlePageChange = (e, page) => {\n    // console.log(e.target.innerText);\n    // setActivePage(e.target.innerText);\n    // for button(btn dont have value), but don't recommend use innerText\n    setActivePage(page); // for button(btn dont have value)\n  };\n\n  const handleFirstPage = e => {\n    setActivePage(1);\n  };\n\n  const handleLastPage = e => {\n    setActivePage(parseInt((activeUser(queryCur, sortType, users, actAttr).length - 1) / maxRowsPerPage) + 1);\n  }; // Expressive functions, show how to display\n\n\n  const setPagination = (pageLen, curPage) => {\n    // curPage: careful string to int\n    // return Array for map: [1,2,'...',9 ]\n    // Logic here\n    const neighborLen = 1;\n    const actLen = 2 * neighborLen + 1; // in act page, then length of linked part\n    // [...Array(100).keys()] OR [...Array.from({ length: 100 }).keys()]\n\n    if (pageLen < actLen * 2) {\n      // console.log('here', pageLen, actLen, users.length);\n      return [...Array.from({\n        length: pageLen\n      }, (v, k) => k + 1)]; // pageNum + 1, We will get: [1,2,3,4,5]\n    } else if (curPage < actLen + 1) {\n      // pageLen >= actLen * 2\n      // [1,2,3,'...',6]\n      return [...Array.from({\n        length: actLen\n      }, (v, k) => k + 1), '...', pageLen];\n    } else if (curPage > pageLen - actLen) {\n      // [1, ... , 4, 5, 6]\n      return [1, '...', ...Array.from({\n        length: actLen\n      }, (v, k) => k + pageLen - actLen + 1)];\n    } else {\n      // [1, ... , 3,4,5, ..., 7]\n      return [1, '...', ...Array.from({\n        length: actLen\n      }, (v, k) => k + curPage * 1 - neighborLen), '...', pageLen];\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"page-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"page-btn\",\n    onClick: e => handleFirstPage(),\n    disabled: activePage < 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, '<<')), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"page-btn\",\n    onClick: e => handlePrevPage(),\n    disabled: activePage < 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, '<')), setPagination(parseInt((activeUser(queryCur, sortType, users, actAttr).length - 1) / maxRowsPerPage) + 1, activePage).map(page => {\n    if (page === '...') {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, \"...\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: page,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        // className='page-btn'\n        className: 'page-btn ' + (page.toString() === activePage.toString() ? 'btn-active' : 'btn-disactive'),\n        onClick: e => handlePageChange(e, page),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      }, page));\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"page-btn\",\n    onClick: e => handleNextPage(),\n    disabled: activePage > parseInt((activeUser(queryCur, sortType, users, actAttr).length - 1) / maxRowsPerPage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, '>')), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"page-btn\",\n    onClick: e => handleLastPage(),\n    disabled: activePage > parseInt((activeUser(queryCur, sortType, users, actAttr).length - 1) / maxRowsPerPage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, '>>'))));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["/home/user/Documents/DCI/backand/BACKEND-13-project-2022-04-27/client/src/components/pagination.js"],"names":["React","Pagination","queryCur","sortType","users","actAttr","activePage","maxRowsPerPage","activeUser","setActivePage","handlePrevPage","e","handleNextPage","handlePageChange","page","handleFirstPage","handleLastPage","parseInt","length","setPagination","pageLen","curPage","neighborLen","actLen","Array","from","v","k","map","toString"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Pagination = ({\n  queryCur,\n  sortType,\n  users,\n  actAttr,\n  activePage,\n  maxRowsPerPage,\n  activeUser,\n  setActivePage\n}) => {\n  const handlePrevPage = e => {\n    setActivePage(activePage - 1);\n  };\n\n  const handleNextPage = e => {\n    setActivePage(activePage * 1 + 1); // sometimes 1+1 = 11\n  };\n\n  const handlePageChange = (e, page) => {\n    // console.log(e.target.innerText);\n    // setActivePage(e.target.innerText);\n    // for button(btn dont have value), but don't recommend use innerText\n    setActivePage(page); // for button(btn dont have value)\n  };\n\n  const handleFirstPage = e => {\n    setActivePage(1);\n  };\n\n  const handleLastPage = e => {\n    setActivePage(\n      parseInt(\n        (activeUser(queryCur, sortType, users, actAttr).length - 1) /\n          maxRowsPerPage\n      ) + 1\n    );\n  };\n\n  // Expressive functions, show how to display\n  const setPagination = (pageLen, curPage) => {\n    // curPage: careful string to int\n    // return Array for map: [1,2,'...',9 ]\n    // Logic here\n    const neighborLen = 1;\n    const actLen = 2 * neighborLen + 1; // in act page, then length of linked part\n    // [...Array(100).keys()] OR [...Array.from({ length: 100 }).keys()]\n    if (pageLen < actLen * 2) {\n      // console.log('here', pageLen, actLen, users.length);\n      return [...Array.from({ length: pageLen }, (v, k) => k + 1)];\n      // pageNum + 1, We will get: [1,2,3,4,5]\n    } else if (curPage < actLen + 1) {\n      // pageLen >= actLen * 2\n      // [1,2,3,'...',6]\n      return [\n        ...Array.from({ length: actLen }, (v, k) => k + 1),\n        '...',\n        pageLen\n      ];\n    } else if (curPage > pageLen - actLen) {\n      // [1, ... , 4, 5, 6]\n      return [\n        1,\n        '...',\n        ...Array.from({ length: actLen }, (v, k) => k + pageLen - actLen + 1)\n      ];\n    } else {\n      // [1, ... , 3,4,5, ..., 7]\n      return [\n        1,\n        '...',\n        ...Array.from(\n          { length: actLen },\n          (v, k) => k + curPage * 1 - neighborLen\n        ),\n        '...',\n        pageLen\n      ];\n    }\n  };\n\n  return (\n    <div className='page-bar'>\n      <ul className='page-list'>\n        <li>\n          <button\n            className='page-btn'\n            onClick={e => handleFirstPage()}\n            disabled={activePage < 2}\n          >\n            {'<<'}\n          </button>\n        </li>\n        <li>\n          <button\n            className='page-btn'\n            onClick={e => handlePrevPage()}\n            disabled={activePage < 2}\n          >\n            {'<'}\n          </button>\n        </li>\n        {setPagination(\n          parseInt(\n            (activeUser(queryCur, sortType, users, actAttr).length - 1) /\n              maxRowsPerPage\n          ) + 1,\n          activePage\n        ).map(page => {\n          if (page === '...') {\n            return (\n              <li>\n                <div>...</div>\n              </li>\n            );\n          } else {\n            return (\n              <li key={page}>\n                <button\n                  // className='page-btn'\n                  className={\n                    'page-btn ' +\n                    (page.toString() === activePage.toString()\n                      ? 'btn-active'\n                      : 'btn-disactive')\n                  }\n                  onClick={e => handlePageChange(e, page)}\n                >\n                  {page}\n                </button>\n              </li>\n            );\n          }\n        })}\n        <li>\n          <button\n            className='page-btn'\n            onClick={e => handleNextPage()}\n            disabled={\n              activePage >\n              parseInt(\n                (activeUser(queryCur, sortType, users, actAttr).length - 1) /\n                  maxRowsPerPage\n              )\n            }\n          >\n            {'>'}\n          </button>\n        </li>\n        <li>\n          <button\n            className='page-btn'\n            onClick={e => handleLastPage()}\n            disabled={\n              activePage >\n              parseInt(\n                (activeUser(queryCur, sortType, users, actAttr).length - 1) /\n                  maxRowsPerPage\n              )\n            }\n          >\n            {'>>'}\n          </button>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}